{"ast":null,"code":"var _classCallCheck = require(\"D:/Newton school/Java worked programs/React/PokemkonAPI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"D:/Newton school/Java worked programs/React/PokemkonAPI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar MAX_SHORT_STRING = require(\"./wasm-hash\").MAX_SHORT_STRING;\nvar BatchedHash = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function BatchedHash(hash) {\n    _classCallCheck(this, BatchedHash);\n    this.string = undefined;\n    this.encoding = undefined;\n    this.hash = hash;\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  _createClass(BatchedHash, [{\n    key: \"update\",\n    value: function update(data, inputEncoding) {\n      if (this.string !== undefined) {\n        if (typeof data === \"string\" && inputEncoding === this.encoding && this.string.length + data.length < MAX_SHORT_STRING) {\n          this.string += data;\n          return this;\n        }\n        this.hash.update(this.string, this.encoding);\n        this.string = undefined;\n      }\n      if (typeof data === \"string\") {\n        if (data.length < MAX_SHORT_STRING && (\n        // base64 encoding is not valid since it may contain padding chars\n        !inputEncoding || !inputEncoding.startsWith(\"ba\"))) {\n          this.string = data;\n          this.encoding = inputEncoding;\n        } else {\n          this.hash.update(data, inputEncoding);\n        }\n      } else {\n        this.hash.update(data);\n      }\n      return this;\n    }\n\n    /**\n     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n     * @param {string=} encoding encoding of the return value\n     * @returns {string|Buffer} digest\n     */\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      if (this.string !== undefined) {\n        this.hash.update(this.string, this.encoding);\n      }\n      return this.hash.digest(encoding);\n    }\n  }]);\n  return BatchedHash;\n}();\nmodule.exports = BatchedHash;","map":{"version":3,"names":["MAX_SHORT_STRING","require","BatchedHash","hash","_classCallCheck","string","undefined","encoding","_createClass","key","value","update","data","inputEncoding","length","startsWith","digest","module","exports"],"sources":["D:/Newton school/Java worked programs/React/PokemkonAPI/node_modules/loader-utils/lib/hash/BatchedHash.js"],"sourcesContent":["const MAX_SHORT_STRING = require(\"./wasm-hash\").MAX_SHORT_STRING;\n\nclass BatchedHash {\n  constructor(hash) {\n    this.string = undefined;\n    this.encoding = undefined;\n    this.hash = hash;\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  update(data, inputEncoding) {\n    if (this.string !== undefined) {\n      if (\n        typeof data === \"string\" &&\n        inputEncoding === this.encoding &&\n        this.string.length + data.length < MAX_SHORT_STRING\n      ) {\n        this.string += data;\n\n        return this;\n      }\n\n      this.hash.update(this.string, this.encoding);\n      this.string = undefined;\n    }\n\n    if (typeof data === \"string\") {\n      if (\n        data.length < MAX_SHORT_STRING &&\n        // base64 encoding is not valid since it may contain padding chars\n        (!inputEncoding || !inputEncoding.startsWith(\"ba\"))\n      ) {\n        this.string = data;\n        this.encoding = inputEncoding;\n      } else {\n        this.hash.update(data, inputEncoding);\n      }\n    } else {\n      this.hash.update(data);\n    }\n\n    return this;\n  }\n\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n  digest(encoding) {\n    if (this.string !== undefined) {\n      this.hash.update(this.string, this.encoding);\n    }\n\n    return this.hash.digest(encoding);\n  }\n}\n\nmodule.exports = BatchedHash;\n"],"mappings":";;AAAA,IAAMA,gBAAgB,GAAGC,OAAO,CAAC,aAAa,CAAC,CAACD,gBAAgB;AAAC,IAE3DE,WAAW;EAAA;;EACf,SAAAA,YAAYC,IAAI,EAAE;IAAAC,eAAA,OAAAF,WAAA;IAChB,IAAI,CAACG,MAAM,GAAGC,SAAS;IACvB,IAAI,CAACC,QAAQ,GAAGD,SAAS;IACzB,IAAI,CAACH,IAAI,GAAGA,IAAI;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;EALEK,YAAA,CAAAN,WAAA;IAAAO,GAAA;IAAAC,KAAA,EAMA,SAAAC,OAAOC,IAAI,EAAEC,aAAa,EAAE;MAC1B,IAAI,IAAI,CAACR,MAAM,KAAKC,SAAS,EAAE;QAC7B,IACE,OAAOM,IAAI,KAAK,QAAQ,IACxBC,aAAa,KAAK,IAAI,CAACN,QAAQ,IAC/B,IAAI,CAACF,MAAM,CAACS,MAAM,GAAGF,IAAI,CAACE,MAAM,GAAGd,gBAAgB,EACnD;UACA,IAAI,CAACK,MAAM,IAAIO,IAAI;UAEnB,OAAO,IAAI;QACb;QAEA,IAAI,CAACT,IAAI,CAACQ,MAAM,CAAC,IAAI,CAACN,MAAM,EAAE,IAAI,CAACE,QAAQ,CAAC;QAC5C,IAAI,CAACF,MAAM,GAAGC,SAAS;MACzB;MAEA,IAAI,OAAOM,IAAI,KAAK,QAAQ,EAAE;QAC5B,IACEA,IAAI,CAACE,MAAM,GAAGd,gBAAgB;QAC9B;QACC,CAACa,aAAa,IAAI,CAACA,aAAa,CAACE,UAAU,CAAC,IAAI,CAAC,CAAC,EACnD;UACA,IAAI,CAACV,MAAM,GAAGO,IAAI;UAClB,IAAI,CAACL,QAAQ,GAAGM,aAAa;QAC/B,CAAC,MAAM;UACL,IAAI,CAACV,IAAI,CAACQ,MAAM,CAACC,IAAI,EAAEC,aAAa,CAAC;QACvC;MACF,CAAC,MAAM;QACL,IAAI,CAACV,IAAI,CAACQ,MAAM,CAACC,IAAI,CAAC;MACxB;MAEA,OAAO,IAAI;IACb;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAH,GAAA;IAAAC,KAAA,EAKA,SAAAM,OAAOT,QAAQ,EAAE;MACf,IAAI,IAAI,CAACF,MAAM,KAAKC,SAAS,EAAE;QAC7B,IAAI,CAACH,IAAI,CAACQ,MAAM,CAAC,IAAI,CAACN,MAAM,EAAE,IAAI,CAACE,QAAQ,CAAC;MAC9C;MAEA,OAAO,IAAI,CAACJ,IAAI,CAACa,MAAM,CAACT,QAAQ,CAAC;IACnC;EAAC;EAAA,OAAAL,WAAA;AAAA;AAGHe,MAAM,CAACC,OAAO,GAAGhB,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}