{"ast":null,"code":"var _classCallCheck = require(\"D:/Newton school/Java worked programs/React/PokemkonAPI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"D:/Newton school/Java worked programs/React/PokemkonAPI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar BULK_SIZE = 2000;\n\n// We are using an object instead of a Map as this will stay static during the runtime\n// so access to it can be optimized by v8\nvar digestCaches = {};\nvar BulkUpdateDecorator = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * @param {Hash | function(): Hash} hashOrFactory function to create a hash\n   * @param {string=} hashKey key for caching\n   */\n  function BulkUpdateDecorator(hashOrFactory, hashKey) {\n    _classCallCheck(this, BulkUpdateDecorator);\n    this.hashKey = hashKey;\n    if (typeof hashOrFactory === \"function\") {\n      this.hashFactory = hashOrFactory;\n      this.hash = undefined;\n    } else {\n      this.hashFactory = undefined;\n      this.hash = hashOrFactory;\n    }\n    this.buffer = \"\";\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  _createClass(BulkUpdateDecorator, [{\n    key: \"update\",\n    value: function update(data, inputEncoding) {\n      if (inputEncoding !== undefined || typeof data !== \"string\" || data.length > BULK_SIZE) {\n        if (this.hash === undefined) {\n          this.hash = this.hashFactory();\n        }\n        if (this.buffer.length > 0) {\n          this.hash.update(this.buffer);\n          this.buffer = \"\";\n        }\n        this.hash.update(data, inputEncoding);\n      } else {\n        this.buffer += data;\n        if (this.buffer.length > BULK_SIZE) {\n          if (this.hash === undefined) {\n            this.hash = this.hashFactory();\n          }\n          this.hash.update(this.buffer);\n          this.buffer = \"\";\n        }\n      }\n      return this;\n    }\n\n    /**\n     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n     * @param {string=} encoding encoding of the return value\n     * @returns {string|Buffer} digest\n     */\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      var digestCache;\n      var buffer = this.buffer;\n      if (this.hash === undefined) {\n        // short data for hash, we can use caching\n        var cacheKey = \"\".concat(this.hashKey, \"-\").concat(encoding);\n        digestCache = digestCaches[cacheKey];\n        if (digestCache === undefined) {\n          digestCache = digestCaches[cacheKey] = new Map();\n        }\n        var cacheEntry = digestCache.get(buffer);\n        if (cacheEntry !== undefined) {\n          return cacheEntry;\n        }\n        this.hash = this.hashFactory();\n      }\n      if (buffer.length > 0) {\n        this.hash.update(buffer);\n      }\n      var digestResult = this.hash.digest(encoding);\n      if (digestCache !== undefined) {\n        digestCache.set(buffer, digestResult);\n      }\n      return digestResult;\n    }\n  }]);\n  return BulkUpdateDecorator;\n}();\nmodule.exports = BulkUpdateDecorator;","map":{"version":3,"names":["BULK_SIZE","digestCaches","BulkUpdateDecorator","hashOrFactory","hashKey","_classCallCheck","hashFactory","hash","undefined","buffer","_createClass","key","value","update","data","inputEncoding","length","digest","encoding","digestCache","cacheKey","concat","Map","cacheEntry","get","digestResult","set","module","exports"],"sources":["D:/Newton school/Java worked programs/React/PokemkonAPI/node_modules/loader-utils/lib/hash/BulkUpdateDecorator.js"],"sourcesContent":["const BULK_SIZE = 2000;\n\n// We are using an object instead of a Map as this will stay static during the runtime\n// so access to it can be optimized by v8\nconst digestCaches = {};\n\nclass BulkUpdateDecorator {\n  /**\n   * @param {Hash | function(): Hash} hashOrFactory function to create a hash\n   * @param {string=} hashKey key for caching\n   */\n  constructor(hashOrFactory, hashKey) {\n    this.hashKey = hashKey;\n\n    if (typeof hashOrFactory === \"function\") {\n      this.hashFactory = hashOrFactory;\n      this.hash = undefined;\n    } else {\n      this.hashFactory = undefined;\n      this.hash = hashOrFactory;\n    }\n\n    this.buffer = \"\";\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  update(data, inputEncoding) {\n    if (\n      inputEncoding !== undefined ||\n      typeof data !== \"string\" ||\n      data.length > BULK_SIZE\n    ) {\n      if (this.hash === undefined) {\n        this.hash = this.hashFactory();\n      }\n\n      if (this.buffer.length > 0) {\n        this.hash.update(this.buffer);\n        this.buffer = \"\";\n      }\n\n      this.hash.update(data, inputEncoding);\n    } else {\n      this.buffer += data;\n\n      if (this.buffer.length > BULK_SIZE) {\n        if (this.hash === undefined) {\n          this.hash = this.hashFactory();\n        }\n\n        this.hash.update(this.buffer);\n        this.buffer = \"\";\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n  digest(encoding) {\n    let digestCache;\n\n    const buffer = this.buffer;\n\n    if (this.hash === undefined) {\n      // short data for hash, we can use caching\n      const cacheKey = `${this.hashKey}-${encoding}`;\n\n      digestCache = digestCaches[cacheKey];\n\n      if (digestCache === undefined) {\n        digestCache = digestCaches[cacheKey] = new Map();\n      }\n\n      const cacheEntry = digestCache.get(buffer);\n\n      if (cacheEntry !== undefined) {\n        return cacheEntry;\n      }\n\n      this.hash = this.hashFactory();\n    }\n\n    if (buffer.length > 0) {\n      this.hash.update(buffer);\n    }\n\n    const digestResult = this.hash.digest(encoding);\n\n    if (digestCache !== undefined) {\n      digestCache.set(buffer, digestResult);\n    }\n\n    return digestResult;\n  }\n}\n\nmodule.exports = BulkUpdateDecorator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}