{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n// 65536 is the size of a wasm memory page\n// 64 is the maximum chunk size for every possible wasm hash implementation\n// 4 is the maximum number of bytes per char for string encoding (max is utf-8)\n// ~3 makes sure that it's always a block of 4 chars, so avoid partially encoded bytes for base64\nvar _classCallCheck = require(\"D:/Newton school/Java worked programs/React/PokemkonAPI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"D:/Newton school/Java worked programs/React/PokemkonAPI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar MAX_SHORT_STRING = Math.floor((65536 - 64) / 4) & ~3;\nvar WasmHash = /*#__PURE__*/function () {\n  /**\n   * @param {WebAssembly.Instance} instance wasm instance\n   * @param {WebAssembly.Instance[]} instancesPool pool of instances\n   * @param {number} chunkSize size of data chunks passed to wasm\n   * @param {number} digestSize size of digest returned by wasm\n   */\n  function WasmHash(instance, instancesPool, chunkSize, digestSize) {\n    _classCallCheck(this, WasmHash);\n    var exports = /** @type {any} */instance.exports;\n    exports.init();\n    this.exports = exports;\n    this.mem = Buffer.from(exports.memory.buffer, 0, 65536);\n    this.buffered = 0;\n    this.instancesPool = instancesPool;\n    this.chunkSize = chunkSize;\n    this.digestSize = digestSize;\n  }\n  _createClass(WasmHash, [{\n    key: \"reset\",\n    value: function reset() {\n      this.buffered = 0;\n      this.exports.init();\n    }\n\n    /**\n     * @param {Buffer | string} data data\n     * @param {BufferEncoding=} encoding encoding\n     * @returns {this} itself\n     */\n  }, {\n    key: \"update\",\n    value: function update(data, encoding) {\n      if (typeof data === \"string\") {\n        while (data.length > MAX_SHORT_STRING) {\n          this._updateWithShortString(data.slice(0, MAX_SHORT_STRING), encoding);\n          data = data.slice(MAX_SHORT_STRING);\n        }\n        this._updateWithShortString(data, encoding);\n        return this;\n      }\n      this._updateWithBuffer(data);\n      return this;\n    }\n\n    /**\n     * @param {string} data data\n     * @param {BufferEncoding=} encoding encoding\n     * @returns {void}\n     */\n  }, {\n    key: \"_updateWithShortString\",\n    value: function _updateWithShortString(data, encoding) {\n      var exports = this.exports,\n        buffered = this.buffered,\n        mem = this.mem,\n        chunkSize = this.chunkSize;\n      var endPos;\n      if (data.length < 70) {\n        if (!encoding || encoding === \"utf-8\" || encoding === \"utf8\") {\n          endPos = buffered;\n          for (var i = 0; i < data.length; i++) {\n            var cc = data.charCodeAt(i);\n            if (cc < 0x80) {\n              mem[endPos++] = cc;\n            } else if (cc < 0x800) {\n              mem[endPos] = cc >> 6 | 0xc0;\n              mem[endPos + 1] = cc & 0x3f | 0x80;\n              endPos += 2;\n            } else {\n              // bail-out for weird chars\n              endPos += mem.write(data.slice(i), endPos, encoding);\n              break;\n            }\n          }\n        } else if (encoding === \"latin1\") {\n          endPos = buffered;\n          for (var _i = 0; _i < data.length; _i++) {\n            var _cc = data.charCodeAt(_i);\n            mem[endPos++] = _cc;\n          }\n        } else {\n          endPos = buffered + mem.write(data, buffered, encoding);\n        }\n      } else {\n        endPos = buffered + mem.write(data, buffered, encoding);\n      }\n      if (endPos < chunkSize) {\n        this.buffered = endPos;\n      } else {\n        var l = endPos & ~(this.chunkSize - 1);\n        exports.update(l);\n        var newBuffered = endPos - l;\n        this.buffered = newBuffered;\n        if (newBuffered > 0) {\n          mem.copyWithin(0, l, endPos);\n        }\n      }\n    }\n\n    /**\n     * @param {Buffer} data data\n     * @returns {void}\n     */\n  }, {\n    key: \"_updateWithBuffer\",\n    value: function _updateWithBuffer(data) {\n      var exports = this.exports,\n        buffered = this.buffered,\n        mem = this.mem;\n      var length = data.length;\n      if (buffered + length < this.chunkSize) {\n        data.copy(mem, buffered, 0, length);\n        this.buffered += length;\n      } else {\n        var l = buffered + length & ~(this.chunkSize - 1);\n        if (l > 65536) {\n          var i = 65536 - buffered;\n          data.copy(mem, buffered, 0, i);\n          exports.update(65536);\n          var stop = l - buffered - 65536;\n          while (i < stop) {\n            data.copy(mem, 0, i, i + 65536);\n            exports.update(65536);\n            i += 65536;\n          }\n          data.copy(mem, 0, i, l - buffered);\n          exports.update(l - buffered - i);\n        } else {\n          data.copy(mem, buffered, 0, l - buffered);\n          exports.update(l);\n        }\n        var newBuffered = length + buffered - l;\n        this.buffered = newBuffered;\n        if (newBuffered > 0) {\n          data.copy(mem, 0, length - newBuffered, length);\n        }\n      }\n    }\n  }, {\n    key: \"digest\",\n    value: function digest(type) {\n      var exports = this.exports,\n        buffered = this.buffered,\n        mem = this.mem,\n        digestSize = this.digestSize;\n      exports.final(buffered);\n      this.instancesPool.push(this);\n      var hex = mem.toString(\"latin1\", 0, digestSize);\n      if (type === \"hex\") {\n        return hex;\n      }\n      if (type === \"binary\" || !type) {\n        return Buffer.from(hex, \"hex\");\n      }\n      return Buffer.from(hex, \"hex\").toString(type);\n    }\n  }]);\n  return WasmHash;\n}();\nvar create = function create(wasmModule, instancesPool, chunkSize, digestSize) {\n  if (instancesPool.length > 0) {\n    var old = instancesPool.pop();\n    old.reset();\n    return old;\n  } else {\n    return new WasmHash(new WebAssembly.Instance(wasmModule), instancesPool, chunkSize, digestSize);\n  }\n};\nmodule.exports = create;\nmodule.exports.MAX_SHORT_STRING = MAX_SHORT_STRING;","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","MAX_SHORT_STRING","Math","floor","WasmHash","instance","instancesPool","chunkSize","digestSize","exports","init","mem","Buffer","from","memory","buffer","buffered","key","value","reset","update","data","encoding","length","_updateWithShortString","slice","_updateWithBuffer","endPos","i","cc","charCodeAt","write","l","newBuffered","copyWithin","copy","stop","digest","type","final","push","hex","toString","create","wasmModule","old","pop","WebAssembly","Instance","module"],"sources":["D:/Newton school/Java worked programs/React/PokemkonAPI/node_modules/loader-utils/lib/hash/wasm-hash.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n// 65536 is the size of a wasm memory page\n// 64 is the maximum chunk size for every possible wasm hash implementation\n// 4 is the maximum number of bytes per char for string encoding (max is utf-8)\n// ~3 makes sure that it's always a block of 4 chars, so avoid partially encoded bytes for base64\nconst MAX_SHORT_STRING = Math.floor((65536 - 64) / 4) & ~3;\n\nclass WasmHash {\n  /**\n   * @param {WebAssembly.Instance} instance wasm instance\n   * @param {WebAssembly.Instance[]} instancesPool pool of instances\n   * @param {number} chunkSize size of data chunks passed to wasm\n   * @param {number} digestSize size of digest returned by wasm\n   */\n  constructor(instance, instancesPool, chunkSize, digestSize) {\n    const exports = /** @type {any} */ (instance.exports);\n\n    exports.init();\n\n    this.exports = exports;\n    this.mem = Buffer.from(exports.memory.buffer, 0, 65536);\n    this.buffered = 0;\n    this.instancesPool = instancesPool;\n    this.chunkSize = chunkSize;\n    this.digestSize = digestSize;\n  }\n\n  reset() {\n    this.buffered = 0;\n    this.exports.init();\n  }\n\n  /**\n   * @param {Buffer | string} data data\n   * @param {BufferEncoding=} encoding encoding\n   * @returns {this} itself\n   */\n  update(data, encoding) {\n    if (typeof data === \"string\") {\n      while (data.length > MAX_SHORT_STRING) {\n        this._updateWithShortString(data.slice(0, MAX_SHORT_STRING), encoding);\n        data = data.slice(MAX_SHORT_STRING);\n      }\n\n      this._updateWithShortString(data, encoding);\n\n      return this;\n    }\n\n    this._updateWithBuffer(data);\n\n    return this;\n  }\n\n  /**\n   * @param {string} data data\n   * @param {BufferEncoding=} encoding encoding\n   * @returns {void}\n   */\n  _updateWithShortString(data, encoding) {\n    const { exports, buffered, mem, chunkSize } = this;\n\n    let endPos;\n\n    if (data.length < 70) {\n      if (!encoding || encoding === \"utf-8\" || encoding === \"utf8\") {\n        endPos = buffered;\n        for (let i = 0; i < data.length; i++) {\n          const cc = data.charCodeAt(i);\n\n          if (cc < 0x80) {\n            mem[endPos++] = cc;\n          } else if (cc < 0x800) {\n            mem[endPos] = (cc >> 6) | 0xc0;\n            mem[endPos + 1] = (cc & 0x3f) | 0x80;\n            endPos += 2;\n          } else {\n            // bail-out for weird chars\n            endPos += mem.write(data.slice(i), endPos, encoding);\n            break;\n          }\n        }\n      } else if (encoding === \"latin1\") {\n        endPos = buffered;\n\n        for (let i = 0; i < data.length; i++) {\n          const cc = data.charCodeAt(i);\n\n          mem[endPos++] = cc;\n        }\n      } else {\n        endPos = buffered + mem.write(data, buffered, encoding);\n      }\n    } else {\n      endPos = buffered + mem.write(data, buffered, encoding);\n    }\n\n    if (endPos < chunkSize) {\n      this.buffered = endPos;\n    } else {\n      const l = endPos & ~(this.chunkSize - 1);\n\n      exports.update(l);\n\n      const newBuffered = endPos - l;\n\n      this.buffered = newBuffered;\n\n      if (newBuffered > 0) {\n        mem.copyWithin(0, l, endPos);\n      }\n    }\n  }\n\n  /**\n   * @param {Buffer} data data\n   * @returns {void}\n   */\n  _updateWithBuffer(data) {\n    const { exports, buffered, mem } = this;\n    const length = data.length;\n\n    if (buffered + length < this.chunkSize) {\n      data.copy(mem, buffered, 0, length);\n\n      this.buffered += length;\n    } else {\n      const l = (buffered + length) & ~(this.chunkSize - 1);\n\n      if (l > 65536) {\n        let i = 65536 - buffered;\n\n        data.copy(mem, buffered, 0, i);\n        exports.update(65536);\n\n        const stop = l - buffered - 65536;\n\n        while (i < stop) {\n          data.copy(mem, 0, i, i + 65536);\n          exports.update(65536);\n          i += 65536;\n        }\n\n        data.copy(mem, 0, i, l - buffered);\n\n        exports.update(l - buffered - i);\n      } else {\n        data.copy(mem, buffered, 0, l - buffered);\n\n        exports.update(l);\n      }\n\n      const newBuffered = length + buffered - l;\n\n      this.buffered = newBuffered;\n\n      if (newBuffered > 0) {\n        data.copy(mem, 0, length - newBuffered, length);\n      }\n    }\n  }\n\n  digest(type) {\n    const { exports, buffered, mem, digestSize } = this;\n\n    exports.final(buffered);\n\n    this.instancesPool.push(this);\n\n    const hex = mem.toString(\"latin1\", 0, digestSize);\n\n    if (type === \"hex\") {\n      return hex;\n    }\n\n    if (type === \"binary\" || !type) {\n      return Buffer.from(hex, \"hex\");\n    }\n\n    return Buffer.from(hex, \"hex\").toString(type);\n  }\n}\n\nconst create = (wasmModule, instancesPool, chunkSize, digestSize) => {\n  if (instancesPool.length > 0) {\n    const old = instancesPool.pop();\n\n    old.reset();\n\n    return old;\n  } else {\n    return new WasmHash(\n      new WebAssembly.Instance(wasmModule),\n      instancesPool,\n      chunkSize,\n      digestSize\n    );\n  }\n};\n\nmodule.exports = create;\nmodule.exports.MAX_SHORT_STRING = MAX_SHORT_STRING;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}